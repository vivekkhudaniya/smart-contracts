/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";

import type { Fallback } from "../Fallback";

export class Fallback__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Fallback> {
    return super.deploy(overrides || {}) as Promise<Fallback>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Fallback {
    return super.attach(address) as Fallback;
  }
  connect(signer: Signer): Fallback__factory {
    return super.connect(signer) as Fallback__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Fallback {
    return new Contract(address, _abi, signerOrProvider) as Fallback;
  }
}

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "func",
        type: "string",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "gas",
        type: "uint256",
      },
    ],
    name: "Log",
    type: "event",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [],
    name: "getBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061023b806100206000396000f3fe6080604052600436106100225760003560e01c806312065fe01461009957610060565b36610060577fdd970dd9b5bfe707922155b058a407655cb18288b807e2216442bca8ad83d6b55a604051610056919061014f565b60405180910390a1005b7fdd970dd9b5bfe707922155b058a407655cb18288b807e2216442bca8ad83d6b55a60405161008f9190610121565b60405180910390a1005b3480156100a557600080fd5b506100ae6100c4565b6040516100bb919061017d565b60405180910390f35b600047905090565b60006100d9600883610198565b91506100e4826101b3565b602082019050919050565b60006100fc600783610198565b9150610107826101dc565b602082019050919050565b61011b816101a9565b82525050565b6000604082019050818103600083015261013a816100cc565b90506101496020830184610112565b92915050565b60006040820190508181036000830152610168816100ef565b90506101776020830184610112565b92915050565b60006020820190506101926000830184610112565b92915050565b600082825260208201905092915050565b6000819050919050565b7f66616c6c6261636b000000000000000000000000000000000000000000000000600082015250565b7f726563656976650000000000000000000000000000000000000000000000000060008201525056fea2646970667358221220b08ec7683d3c90cf9716e0fa37f5ed0ee89728ad560acb87c6ed1d793472620664736f6c63430008030033";
