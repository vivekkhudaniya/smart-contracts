/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";

import type { Counter } from "../Counter";

export class Counter__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _name: string,
    _initialCount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Counter> {
    return super.deploy(
      _name,
      _initialCount,
      overrides || {}
    ) as Promise<Counter>;
  }
  getDeployTransaction(
    _name: string,
    _initialCount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_name, _initialCount, overrides || {});
  }
  attach(address: string): Counter {
    return super.attach(address) as Counter;
  }
  connect(signer: Signer): Counter__factory {
    return super.connect(signer) as Counter__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Counter {
    return new Contract(address, _abi, signerOrProvider) as Counter;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "_initialCount",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "count",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decrement",
    outputs: [
      {
        internalType: "uint256",
        name: "newCount",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getName",
    outputs: [
      {
        internalType: "string",
        name: "currentName",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "increment",
    outputs: [
      {
        internalType: "uint256",
        name: "newCount",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_newName",
        type: "string",
      },
    ],
    name: "setName",
    outputs: [
      {
        internalType: "string",
        name: "newName",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000b5438038062000b54833981810160405281019062000037919062000198565b81600090805190602001906200004f9291906200005f565b5080600181905550505062000386565b8280546200006d9062000291565b90600052602060002090601f016020900481019282620000915760008555620000dd565b82601f10620000ac57805160ff1916838001178555620000dd565b82800160010185558215620000dd579182015b82811115620000dc578251825591602001919060010190620000bf565b5b509050620000ec9190620000f0565b5090565b5b808211156200010b576000816000905550600101620000f1565b5090565b60006200012662000120846200021b565b620001f2565b9050828152602081018484840111156200013f57600080fd5b6200014c8482856200025b565b509392505050565b600082601f8301126200016657600080fd5b8151620001788482602086016200010f565b91505092915050565b60008151905062000192816200036c565b92915050565b60008060408385031215620001ac57600080fd5b600083015167ffffffffffffffff811115620001c757600080fd5b620001d58582860162000154565b9250506020620001e88582860162000181565b9150509250929050565b6000620001fe62000211565b90506200020c8282620002c7565b919050565b6000604051905090565b600067ffffffffffffffff8211156200023957620002386200032c565b5b62000244826200035b565b9050602081019050919050565b6000819050919050565b60005b838110156200027b5780820151818401526020810190506200025e565b838111156200028b576000848401525b50505050565b60006002820490506001821680620002aa57607f821691505b60208210811415620002c157620002c0620002fd565b5b50919050565b620002d2826200035b565b810181811067ffffffffffffffff82111715620002f457620002f36200032c565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b620003778162000251565b81146200038357600080fd5b50565b6107be80620003966000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80632baeceb71161005b5780632baeceb7146100dc578063a87d942c146100fa578063c47f002714610118578063d09de08a146101485761007d565b806306661abd1461008257806306fdde03146100a057806317d7de7c146100be575b600080fd5b61008a610166565b604051610097919061053b565b60405180910390f35b6100a861016c565b6040516100b59190610519565b60405180910390f35b6100c66101fa565b6040516100d39190610519565b60405180910390f35b6100e461028c565b6040516100f1919061053b565b60405180910390f35b6101026102ae565b60405161010f919061053b565b60405180910390f35b610132600480360381019061012d9190610490565b6102b8565b60405161013f9190610519565b60405180910390f35b610150610363565b60405161015d919061053b565b60405180910390f35b60015481565b600080546101799061063e565b80601f01602080910402602001604051908101604052809291908181526020018280546101a59061063e565b80156101f25780601f106101c7576101008083540402835291602001916101f2565b820191906000526020600020905b8154815290600101906020018083116101d557829003601f168201915b505050505081565b6060600080546102099061063e565b80601f01602080910402602001604051908101604052809291908181526020018280546102359061063e565b80156102825780601f1061025757610100808354040283529160200191610282565b820191906000526020600020905b81548152906001019060200180831161026557829003601f168201915b5050505050905090565b6000600160008154809291906102a190610614565b9190505550600154905090565b6000600154905090565b606081600090805190602001906102d0929190610385565b50600080546102de9061063e565b80601f016020809104026020016040519081016040528092919081815260200182805461030a9061063e565b80156103575780601f1061032c57610100808354040283529160200191610357565b820191906000526020600020905b81548152906001019060200180831161033a57829003601f168201915b50505050509050919050565b600060016000815480929190610378906106a1565b9190505550600154905090565b8280546103919061063e565b90600052602060002090601f0160209004810192826103b357600085556103fa565b82601f106103cc57805160ff19168380011785556103fa565b828001600101855582156103fa579182015b828111156103f95782518255916020019190600101906103de565b5b509050610407919061040b565b5090565b5b8082111561042457600081600090555060010161040c565b5090565b600061043b6104368461057b565b610556565b90508281526020810184848401111561045357600080fd5b61045e8482856105d2565b509392505050565b600082601f83011261047757600080fd5b8135610487848260208601610428565b91505092915050565b6000602082840312156104a257600080fd5b600082013567ffffffffffffffff8111156104bc57600080fd5b6104c884828501610466565b91505092915050565b60006104dc826105ac565b6104e681856105b7565b93506104f68185602086016105e1565b6104ff81610777565b840191505092915050565b610513816105c8565b82525050565b6000602082019050818103600083015261053381846104d1565b905092915050565b6000602082019050610550600083018461050a565b92915050565b6000610560610571565b905061056c8282610670565b919050565b6000604051905090565b600067ffffffffffffffff82111561059657610595610748565b5b61059f82610777565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b6000819050919050565b82818337600083830152505050565b60005b838110156105ff5780820151818401526020810190506105e4565b8381111561060e576000848401525b50505050565b600061061f826105c8565b91506000821415610633576106326106ea565b5b600182039050919050565b6000600282049050600182168061065657607f821691505b6020821081141561066a57610669610719565b5b50919050565b61067982610777565b810181811067ffffffffffffffff8211171561069857610697610748565b5b80604052505050565b60006106ac826105c8565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156106df576106de6106ea565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f830116905091905056fea26469706673582212204c7e590408d8a91e7ab4acf9d772ba43d3f6f78afa4b25ef18fcf6215df1154264736f6c63430008030033";
